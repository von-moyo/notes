{"version":3,"sources":["components/Sidebar.js","components/Editor.js","App.js","index.js"],"names":["Sidebar","props","noteElements","notes","map","note","index","react_default","a","createElement","key","id","className","concat","currentNote","onClick","setCurrentNoteId","body","split","event","deleteNote","newNote","Editor","_ref","updateNote","_React$useState","React","useState","_React$useState2","Object","slicedToArray","selectedTab","setSelectedTab","converter","Showdown","Converter","tables","simplifiedAutoLink","strikethrough","tasklists","js_default","value","onChange","onTabChange","generateMarkdownPreview","markdown","Promise","resolve","makeHtml","minEditorHeight","heightUnits","App","JSON","parse","localStorage","getItem","setNotes","_React$useState3","_React$useState4","currentNoteId","createNewNote","nanoid","prevNotes","toConsumableArray","findCurrentNote","find","useEffect","setItem","stringify","length","react_split_es","sizes","direction","noteId","stopPropagation","oldNotes","filter","text","newArray","i","oldNote","unshift","objectSpread","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a668dbf.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function Sidebar(props) {\n    const noteElements = props.notes.map((note, index) => (\n        <div key={note.id}>\n            <div\n\n                className={`title ${note.id === props.currentNote.id ? \"selected-note\" : \"\"\n                    }`}\n                onClick={() => props.setCurrentNoteId(note.id)}\n            >\n                <h4 className=\"text-snippet\">{note.body.split(\"\\n\")[0]}</h4>\n                <button\n                    className=\"delete-btn\"\n                    onClick={(event) => props.deleteNote(event, note.id)}\n                >\n                    <i className=\"gg-trash trash-icon\"></i>\n                </button>\n            </div>\n        </div>\n    ))\n\n    return (\n        <section className=\"pane sidebar\">\n            <div className=\"sidebar--header\">\n                <h3>Notes</h3>\n                <button className=\"new-note\" onClick={props.newNote}>+</button>\n            </div>\n            {noteElements}\n        </section>\n    )\n}\n","import React from \"react\"\nimport ReactMde from \"react-mde\"\nimport Showdown from \"showdown\"\n\nexport default function Editor({ currentNote, updateNote }) {\n    const [selectedTab, setSelectedTab] = React.useState(\"write\")\n\n    const converter = new Showdown.Converter({\n        tables: true,\n        simplifiedAutoLink: true,\n        strikethrough: true,\n        tasklists: true,\n    })  \n\n    return (\n        <section className=\"pane editor\">\n            <ReactMde\n                value={currentNote.body}\n                onChange={updateNote}\n                selectedTab={selectedTab}\n                onTabChange={setSelectedTab}\n                generateMarkdownPreview={(markdown) =>\n                    Promise.resolve(converter.makeHtml(markdown))\n                }\n                minEditorHeight={95}\n                heightUnits=\"vh\"\n            />\n        </section>\n    )\n}\n","import './style.css'\nimport React from \"react\"\nimport Sidebar from \"./components/Sidebar\"\nimport Editor from \"./components/Editor\"\nimport Split from \"react-split\"\nimport {nanoid} from \"nanoid\"\n\nexport default function App() {\n    const [notes, setNotes] = React.useState(\n        () => JSON.parse(localStorage.getItem(\"notes\")) || []\n    )\n    const [currentNoteId, setCurrentNoteId] = React.useState(\n        (notes[0] && notes[0].id) || \"\"\n    )\n    \n    React.useEffect(() => {\n        localStorage.setItem(\"notes\", JSON.stringify(notes))\n    }, [notes])\n    \n    function createNewNote() {\n        const newNote = {\n            id: nanoid(),\n            body: \"# Type your markdown note's title here\"\n        }\n        setNotes(prevNotes => [newNote, ...prevNotes])\n        setCurrentNoteId(newNote.id)\n    }\n    \n    function updateNote(text) {\n        // Put the most recently-modified note at the top\n        setNotes(oldNotes => {\n            const newArray = []\n            for(let i = 0; i < oldNotes.length; i++) {\n                const oldNote = oldNotes[i]\n                if(oldNote.id === currentNoteId) {\n                    newArray.unshift({ ...oldNote, body: text })\n                } else {\n                    newArray.push(oldNote)\n                }\n            }\n            return newArray\n        })\n    }\n    \n    /**\n     * Challenge: complete and implement the deleteNote function\n     * \n     * Hints: \n     * 1. What array method can be used to return a new\n     *    array that has filtered out an item based \n     *    on a condition?\n     * 2. Notice the parameters being based to the function\n     *    and think about how both of those parameters\n     *    can be passed in during the onClick event handler\n     */\n    \n    function deleteNote(event, noteId) {\n        event.stopPropagation()\n        setNotes(oldNotes => oldNotes.filter(note => note.id !== noteId))\n    }\n    \n    function findCurrentNote() {\n        return notes.find(note => {\n            return note.id === currentNoteId\n        }) || notes[0]\n    }\n    \n    return (\n        <main>\n        {\n            notes.length > 0 \n            ?\n            <Split \n                sizes={[30, 70]} \n                direction=\"horizontal\" \n                className=\"split\"\n            >\n                <Sidebar\n                    notes={notes}\n                    currentNote={findCurrentNote()}\n                    setCurrentNoteId={setCurrentNoteId}\n                    newNote={createNewNote}\n                    deleteNote={deleteNote}\n                />\n                {\n                    currentNoteId && \n                    notes.length > 0 &&\n                    <Editor \n                        currentNote={findCurrentNote()} \n                        updateNote={updateNote} \n                    />\n                }\n            </Split>\n            :\n            <div className=\"no-notes\">\n                <h1>You have no notes</h1>\n                <button \n                    className=\"first-note\" \n                    onClick={createNewNote}\n                >\n                    Create one now\n                </button>\n            </div>\n            \n        }\n        </main>\n    )\n}\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\n\nimport App from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}